name: Deploy Audit Processors

env:
  DEPLOYER_ROLE: arn:aws:iam::761723964695:role/plat-872-audit-pipeline-GitHubActionsRole-6FVSYM2IO5VO
  DESTINATION_BUCKET: di-auth-lambda-signed-20220215170204376200000002

on:
  push:
    branches:
      - main
    paths:
      - "audit-processors"
  workflow_run:
    workflows: ["Build modules"]
    types:
      - completed


jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.DEPLOYER_ROLE }}
          aws-region: eu-west-2
      
      - name: Download and copy Audit Processors signed lambda zip
        working-directory: ci/terraform/audit-processors
        run: |
          aws s3 cp s3://dev-platform-destination-test/ ./artifacts 
          --recursive --exclude "*" 
          --include "signed-audit-processors-${{ github.sha }}-*"
          mv artifacts/signed-audit-processors-*.zip artifacts/signed-audit-processors.zip

      - name: Upload Audit Processors Terraform files
        working-directory: ci/terraform
        run: |
          zip -r template.zip .
          S3_RESPONSE=`aws s3api put-object \
            --bucket plat-872-audit-pipeline-githubartifactsourcebucke-xsuo8xq7wb9d \
            --key template.zip \
            --body template.zip`
          VERSION=`echo $S3_RESPONSE | jq .VersionId -r`
          echo "VERSION=$VERSION" >> $GITHUB_ENV
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.DEPLOYER_ROLE }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.9.0'

      - name: Build, tag, and push testing image to Amazon ECR
        working-directory: audit-processors
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: test-image-repository-testrunnerimagerepository-u2v6rkrbopzb
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          cosign sign --key awskms:///${CONTAINER_SIGN_KMS_KEY} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG